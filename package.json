{
  "name": "com.unity.services.vivox",
  "displayName": "Vivox",
  "version": "16.5.0",
  "vivox_core_version": "5.25.0",
  "unity": "2020.3",
  "_upm": {
    "gameService": {
      "groupIndex": 2,
      "groupName": "Multiplayer",
      "genericDashboardUrl": "https://dashboard.unity3d.com/vivox",
      "projectDashboardUrl": "https://dashboard.unity3d.com/organizations/{0}/projects/{1}/vivox/credentials",
      "projectDashboardUrlType": "OrganizationKeyAndProjectGuid",
      "configurePath": "Project/Services/Vivox"
    },
    "supportedPlatforms": [
      "Android",
      "iOS",
      "mac",
      "Windows"
    ],
    "changelog": "### Added\n- WebGL now has limited support for voice and text chat in a single channel.\n- Vivox Safe Voice consent endpoints have been added to the VivoxService, allowing for collection of consent from users for Vivox Safe Voice recordings.\n  \n### Changed\n- Moved the IVivoxTokenProvider validation step from Vivox SDK initialization to the Login operation.\n- Made the error reported by the VivoxParticipantTap a bit clearer when the 'Channel Name' or the 'Participant Name' parameter are unknown or not set.\n### Fixed\n- Resolved an issue where attempting to rejoin a channel was not possible after a JoinChannelAsync operation experienced a TimeoutException.\n- Resolved an issue where `CancellationTokenSource` instances used internally were not being disposed of when no longer needed, occassionally resulting in unexpected behavior.\n- Fixed a bug where allocated memory that was supposed to be aligned was not actually aligned\n- Fixed a bug where the \"Channel Name\" field for Audio Taps would reset to empty when an unexpected value was entered.\n- Improved the overall experience of interacting with the Audio Tap inspector by registering the tap only after all fields are fully edited, instead of on every character entry.\n- Fixed a bug that would prevent the `VivoxParticipant.ParticipantMuteStateChanged` event from firing."
  },
  "description": "Unity's voice and text chat service for multiplayer communication offers voice chat and direct message text service with a managed hosted solution. Plug into your game and configure your project settings to add communications to your project immediately. Connect an unlimited number of users in 2D and 3D channels. Monitor concurrency on your dashboard. Add a custom UI to allow players to control voice volume, mute, and add audio effects to voice channels and manage them. Place users in team chat and allow them to participate in multiple channels.",
  "dependencies": {
    "com.unity.settings-manager": "1.0.3",
    "com.unity.services.core": "1.12.5",
    "com.unity.nuget.newtonsoft-json": "3.0.2",
    "com.unity.modules.audio": "1.0.0"
  },
  "samples": [
    {
      "displayName": "Chat Channel Sample",
      "description": "This sample showcases voice chat, text chat, text-to-speech, muting, and chat history features for immersive, interactive user engagement.",
      "path": "Samples~/ChatChannelSample"
    },
    {
      "displayName": "Text Chat Sample",
      "description": "This text-focused sample showcases a robust chat experience that demonstrates sending, editing, and deleting DM or channel messages along with retrieving past conversations and their message history.",
      "path": "Samples~/TextSample"
    }
  ],
  "relatedPackages": {
    "com.unity.services.vivox.tests": "16.5.0"
  },
  "upmCi": {
    "footprint": "31434a65576ad29e950dc555b5f7ca735e16d417"
  },
  "documentationUrl": "https://docs.unity3d.com/Packages/com.unity.services.vivox@16.5/manual/index.html",
  "repository": {
    "url": "https://github.cds.internal.unity3d.com/unity/vivox-unity-sdk.git",
    "type": "git",
    "revision": "267d221c392e44317a9686ebc411c57b88a9346b"
  }
}
